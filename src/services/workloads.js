// src/services/workloads.js
import { supabase } from '@/config/supabase';



// src/services/workloads.js
export async function getMyWorkloadReport(filters) {
  const {
    student_id,
    academic_year = null,
    semester = null,
  } = filters;

  if (!student_id) return { success: false, error: "Student ID is required." };

  const { data, error } = await supabase.rpc('get_my_workload_report', {
    p_student_id: student_id,
    p_academic_year: academic_year,
    p_semester: semester,
  });

  if (error) return { success: false, error: error.message };
  return { success: true, data };
}


// 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ" (‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á)
// ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ student_id ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà user_id, ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ student_id ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
export async function getOtherWorkloadsByStudent(studentId) {
  if (!studentId) return { success: false, error: "Student ID is required" };

  const { data, error } = await supabase
    .from('student_workloads')
    .select('*')
    .eq('student_id', studentId)
    .is('assignment_id', null) // **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ assignment_id**
    .order('work_date', { ascending: false });

  if (error) return { success: false, error: error.message };
  return { success: true, data };
}

// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ‡πÉ‡∏´‡∏°‡πà
export async function createOtherWorkload(workloadData) {
  console.log("üì§ [createOtherWorkload] sending data:", workloadData);

  const { data, error } = await supabase
    .from('student_workloads')
    .insert([workloadData])
    .select()
    .single();

  if (error) {
    console.error("‚ùå Supabase insert error:", error);
    return { success: false, error: error.message };
  }

  console.log("‚úÖ Inserted workload:", data);
  return { success: true, data };
}

// 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï "‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
export async function updateOtherWorkload(id, workloadData) {
  const { data, error } = await supabase.from('student_workloads').update(workloadData).eq('id', id).select().single();
  if (error) return { success: false, error: error.message };
  return { success: true, data };
}

// 4. ‡∏•‡∏ö "‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
export async function deleteOtherWorkload(id) {
  const { error } = await supabase.from('student_workloads').delete().eq('id', id);
  if (error) return { success: false, error: error.message };
  return { success: true };
}

// 5. ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ (Assignments) ‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
export async function getAcademicAssignmentsByStudent(studentId) {
  if (!studentId) return { success: false, error: "Student ID is required" };

  try {
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏´‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    const { data: enrollments, error: enrollError } = await supabase
      .from('subject_enrollments')
      .select('subject_id')
      .eq('student_id', studentId);

    if (enrollError) throw enrollError;
    if (!enrollments || enrollments.length === 0) {
      return { success: true, data: [] }; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡πÉ‡∏î‡πÜ
    }

    const subjectIds = enrollments.map(e => e.subject_id);

    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const { data: assignments, error: assignError } = await supabase
      .from('assignments')
      .select(`
        *,
        subject:subjects ( subject_code, subject_name ),
        teacher:users ( full_name )
      `)
      .in('subject_id', subjectIds)
      .order('due_date', { ascending: true });

    if (assignError) throw assignError;

    return { success: true, data: assignments };

  } catch (error) {
    console.error("Service error in getAcademicAssignmentsByStudent:", error);
    return { success: false, error: error.message };
  }
}


// Helper function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ student_id ‡∏à‡∏≤‡∏Å user_id
export async function getStudentProfileByUserId(userId) {
  if (!userId) return { success: false, error: "User ID is required" };
  const { data, error } = await supabase.from('students').select('id').eq('user_id', userId).single();
  if (error) return { success: false, error: error.message };
  return { success: true, data };
}